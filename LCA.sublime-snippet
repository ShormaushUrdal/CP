<snippet>
	<content><![CDATA[
void preprocess(int node, int p){
      tin[node] = ++timer;
      par[node][0] = p;
      ll w = (p == 0) ? 0 : wtc[{min(node , p),max(node , p)}];
      st[node][0] = w;
      fr(i, 1, 19){
          if(par[node][i - 1] < 1){
              par[node][i] = 0;
              st[node][i] = 0;
              continue;
          }
          par[node][i] = par[par[node][i - 1]][i - 1];
          st[node][i] = max(st[node][i - 1] ,st[par[node][i - 1]][i - 1]);
      }
      for(auto x : g[node]){
          if(x.first == p){
              continue;
          }
          preprocess(x.first , node);
      }
      tout[node] = ++timer;
}
 
bool anc(int u,int v){
      return (tin[u] <= tin[v] && tout[u] >= tout[v]);
}
 
pair<int,int> lca(int u,int v){  //number of jumps / lca           
      ll fr = 0; ll sc = 0;
      if(anc(u , v)){

          // return u;

          rev(i, 19, 0){
            if(par[v][i] < 1)
                continue;
            if(!anc(par[v][i] , u)){
              v = par[v][i];
              fr += (1 << i);            
            }                   
          }
          return {0 , fr + 1};
      }
      if(anc(v , u)){

          // return v;

          rev(i, 19, 0){
            if(par[u][i] < 1)
                continue;
            if(!anc(par[u][i] , v)){                           
              u = par[u][i];
              sc += (1 << i);            
            }  
                 
          }           
          return {sc + 1 , 0};
      }
      ll temp = u;
     
      rev(i , 19, 0){
          if(par[u][i] < 1)
              continue;
          if(!anc(par[u][i] , v)){
            u = par[u][i];
            fr += (1 << i);            
          }                 
      }
      u = par[u][0];
 
      rev(i, 19,0){
          if(par[v][i] < 1)
              continue;
          if(!anc(par[v][i] , u)){
            v = par[v][i];
            sc += (1 << i);
          }          
      }
      return {fr + 1, sc + 1};
      // return par[u][0];
}
]]></content>
    <tabTrigger>lca</tabTrigger>
    <scope>source.c++</scope>
    <description>LCA Snippet</description>
</snippet>
