<snippet>
    <content><![CDATA[
ll a[N];

class Segtree {
    vector<ll> seg;
    vector<ll> lazy;

    ll merge(ll left, ll right) {
        return left + right; 
    }

public:
    Segtree(ll n) {
        seg.resize(4 * n + 1);
        lazy.resize(4 * n + 1);
    }

    void build(ll ind, ll low, ll high) {    
        if (low == high) {
            seg[ind] = a[low];
            return;
        }
        ll mid = (low + high) >> 1;
        build((ind << 1) + 1, low, mid);
        build((ind << 1) + 2, mid + 1, high);
        seg[ind] = merge(seg[(ind << 1) + 1], seg[(ind << 1) + 2]);
    }

    ll query(ll ind, ll low, ll high, ll l, ll r) {                    
        if (lazy[ind] != 0) {
            seg[ind] += (high - low + 1) * lazy[ind];
            if (low != high) {
                lazy[(ind << 1) + 1] += lazy[ind];
                lazy[(ind << 1) + 2] += lazy[ind];
            }
            lazy[ind] = 0;        
        }
        if (high < l || low > r) return 0;
        if (low >= l && high <= r) return seg[ind];
        ll mid = (low + high) >> 1;
        ll left = query((ind << 1) + 1, low, mid, l, r);
        ll right = query((ind << 1) + 2, mid + 1, high, l, r);
        return merge(left, right);
    }

    void update(ll ind, ll low, ll high, ll l, ll r, ll val) {
        if (lazy[ind] != 0) {
            seg[ind] += lazy[ind] * (high - low + 1);              
            if (low != high) {
                lazy[(ind << 1) + 1] += lazy[ind];
                lazy[(ind << 1) + 2] += lazy[ind];                  
            }
            lazy[ind] = 0;                
        }

        if (high < l || low > r) return;

        if (low >= l && high <= r) {
            seg[ind] += val * (high - low + 1);              
            if (low != high) {   
                lazy[(ind << 1) + 1] += val;
                lazy[(ind << 1) + 2] += val;                  
            }
            return;
        }
        ll mid = (high + low) >> 1;
        update((ind << 1) + 1, low, mid, l, r, val);
        update((ind << 1) + 2, mid + 1, high, l, r, val);
        seg[ind] = merge(seg[(ind << 1) + 1], seg[(ind << 1) + 2]);
    }
};
]]></content>
    <tabTrigger>lazytree</tabTrigger>
    <scope>source.c++</scope>
    <description>Lazy Segment Tree</description>
</snippet>
