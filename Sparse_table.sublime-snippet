<snippet>
	<content><![CDATA[

class SparseTable {
private:
    vector<vector<ll>> table;
    ll N, K;
    vector<ll> log_table;
    ll merge(ll a, ll b) {
        return __gcd(a, b);
    }

public:
    SparseTable(ll arr[], ll N) {
        K = 0;
        while ((1LL << K) <= N) K++;
        table.resize(N);
        log_table.resize(N + 1);
        log_table[1] = 0;
        for (ll i = 2; i <= N; i++) {
            log_table[i] = log_table[i/2] + 1;
        }
        
        for (ll i = 0; i < N; ++i) {
            table[i].resize(K + 1);
            table[i][0] = arr[i];
        }
       
        for (ll j = 1; j < K; ++j) {
            for (ll i = 0; i + (1LL << j) <= N; ++i) {
                table[i][j] = merge(table[i][j - 1], table[i + (1LL << (j - 1))][j - 1]);
            }
        }
    }

    ll query(ll L, ll R) {
        ll length = R - L + 1;
        ll k = log_table[length];
        return merge(table[L][k], table[R - (1LL << k) + 1][k]);
    }


    ll query2(ll L, ll R) {
        ll result = 0;        
        for (ll j = K - 1; j >= 0; j--) {
            if (L + (1LL << j) - 1 <= R) {
                result = merge(result, table[L][j]);
                L += (1LL << j);
            }
        }        
        return result;
    }
};

]]></content>
 <tabTrigger>Sparse table</tabTrigger>
    <scope>source.c++</scope>
    <description>Sparse table</description>
</snippet>
